use crate::lexing::{Token, TokenError};
use crate::ast;

use std::borrow::Cow;

grammar<'input>(input: &'input str);

pub Query: ast::Query = {
    <mut queries: Query_+> ";"? => if queries.len() == 1 { queries.remove(0) } else { ast::Query::QueryList(<>) }
}

Query_: ast::Query = {
    "explain" <Query_> => ast::Query::Explain(Box::new(<>)),
    <SelectStmt> ";" => ast::Query::Select(<>),
    <CreateStmt> ";" => ast::Query::Create(<>)
}

CreateStmt: ast::Create = {
    "create" "table" <CreateTable> => ast::Create::Table(<>)
}

CreateTable: ast::CreateTable = {
    <table: Table> "(" <defs: Comma1<CreateDefinition>> ")" => {
        let (schema, table) = table;
        ast::CreateTable {
            schema,
            name: table,
            create_definitions: defs
        }
    }
}

CreateDefinition: ast::CreateDefinition = {
    ColumnDefinition => ast::CreateDefinition::Column(<>),
}

ColumnDefinition: ast::ColumnDefinition = {
    <col_name: Identifier>
        <data_type: DataType>
        <nullable: ("not"? "null")?>
        <default: ("default" <Expr>)?>
        <auto_increment: "auto_increment"?>
        <key: (<"unique"?> <"primary"?> "key")?>
        => ast::ColumnDefinition {
                id: col_name,
                data_type,
                non_null: nullable.map(|(not, _)| { not.is_some() }).unwrap_or(false),
                auto_increment: auto_increment.is_some(),
                unique: key.as_ref().and_then(|(u, _)| u.as_ref()).is_some(),
                primary: key.as_ref().and_then(|(_, p)| p.as_ref()).is_some(),
                key: key.is_some()
           ,}
}

DataType: ast::DataType = {
    "int_t" => { ast::IntType(8).into() },
    "varchar_t" "(" <width: "int"> ")" => { ast::VarCharType(width.try_into().unwrap_or_else(|e| panic!("must be at most 255: {e}"))).into()},
    "varbinary_t" "(" <width: "int"> ")" => { ast::VarBinaryType(width.try_into().unwrap_or_else(|e| panic!("must be at most 255: {e}"))).into()},
    "float_t" => { ast::FloatType(8).into() },
    "boolean_t" => { ast::BooleanType.into() }
}

SelectStmt: ast::Select = {
    "select" <cols: Comma<ResultColumn>>
        <from: ("from" <FromClause>)?>
        <condition: ("where" <Expr>)?>
    => {
        ast::Select {
            columns: cols,
            from,
            condition,
            limit: None,
            offset: None,
            }
    }
}

FromClause: ast::FromClause = {
    TableOrSubQuery => ast::FromClause(<>),
    JoinClause  => ast::FromClause(ast::TableOrSubQuery::JoinClause(<>)),
}

TableOrSubQuery: ast::TableOrSubQuery = {
    <table: Table> <table_alias: ("as" <Identifier>)?> => {
        ast::TableOrSubQuery::Table {
            schema: table.0,
            table_name: table.1,
            alias: table_alias,
        }
    },
    "(" <select: SelectStmt>  ")"  <table_alias: ("as" <Identifier>)?>=> {
            ast::TableOrSubQuery::Select {
                select: Box::new(select),
                alias: table_alias
            }
        },
    "(" <JoinClause> ")" => {
        ast::TableOrSubQuery::JoinClause(<>)
    }
}

JoinClause: ast::JoinClause = {
    <left: TableOrSubQuery> <op: JoinOperator> <right: TableOrSubQuery> <constraint: JoinConstraint> => ast::JoinClause { left: Box::new(left), op, right: Box::new(right), constraint},
    <base: JoinClause>  <op: JoinOperator> <right: TableOrSubQuery> <constraint: JoinConstraint>  => ast::JoinClause { left: Box::new(ast::TableOrSubQuery::JoinClause(base)), op, right: Box::new(right), constraint},
}

JoinOperator: ast::JoinOperator = {
    "," => ast::JoinOperator::Inner,
    "inner"? "join" => ast::JoinOperator::Inner,
    "left" "outer"? "join" => ast::JoinOperator::Left,
    "right" "outer"? "join" => ast::JoinOperator::Right,
    "full" "outer"? "join" => ast::JoinOperator::Full,
    "outer" "join" => ast::JoinOperator::Outer,
    "cross" "join" => ast::JoinOperator::Cross,
}

JoinConstraint: ast::JoinConstraint = {
    "on" <mut e: Expr> => { e.reduce(); ast::JoinConstraint { on: e }}
}

ResultColumn: ast::ResultColumn = {
    "*" => ast::ResultColumn::Wildcard,
    <table_name: Identifier> "." "*" => ast::ResultColumn::TableWildcard(table_name),
    <mut e: Expr> <alias: ("as" <Identifier>)?> => {
        let alias = match alias {
            Some(alias) => Some(alias),
            None => {
                if e.is_const() {
                    Some(ast::Identifier::from(e.to_string()))
                } else {
                    None
                }
            }
        };
        e.reduce();
        ast::ResultColumn::Expr { expr: e, alias }
    },
}

Expr: ast::Expr = {
    #[precedence(level="0")]
    Literal => ast::Expr::Literal{literal: <>},
     #[precedence(level="0")]
    "?" => ast::Expr::BindParameter{ parameter: None} ,
     #[precedence(level="0")]
    ":" <"int"> =>  ast::Expr::BindParameter{ parameter: Some(<>)},
     #[precedence(level="0")]
    <table_name: (<Table> ".")?> <column_name: Identifier> => {
        let column_ref: ast::ColumnRef = match table_name {
            Some((Some(schema), table)) => {
                ast::ResolvedColumnRef::new(schema, table, column_name).into()
            }
            Some((None, table)) => {
                ast::UnresolvedColumnRef::with_table(table, column_name).into()
            }
            None => {
                ast::UnresolvedColumnRef::with_column(column_name).into()
            }
            _ => unreachable!()
        };
        ast::Expr::Column {
            column: column_ref
        }
    },
    #[precedence(level="1")]
    "not" <e: Expr> => ast::Expr::Unary { op: ast::UnaryOp::Not, expr: Box::new(e) },
    #[precedence(level="1")]
    "-" <e: Expr> => ast::Expr::Unary { op: ast::UnaryOp::Negate, expr: Box::new(e) },
    #[precedence(level="2")] #[assoc(side="left")]
    <l: Expr> "*" <r: Expr> => ast::Expr::Binary { left: Box::new(l), op: ast::BinaryOp::Multiply, right: Box::new(r) },
    #[precedence(level="2")] #[assoc(side="left")]
    <l: Expr> "/" <r: Expr> => ast::Expr::Binary { left: Box::new(l), op: ast::BinaryOp::Divide, right: Box::new(r) },

    #[precedence(level="3")] #[assoc(side="left")]
    <l: Expr> "+" <r: Expr> => ast::Expr::Binary { left: Box::new(l), op: ast::BinaryOp::Plus, right: Box::new(r) },
    #[precedence(level="3")] #[assoc(side="left")]
    <l: Expr> "-" <r: Expr> => ast::Expr::Binary { left: Box::new(l), op: ast::BinaryOp::Minus, right: Box::new(r) },

    #[precedence(level="4")] #[assoc(side="left")]
    <l: Expr> "=" <r: Expr> => ast::Expr::Binary { left: Box::new(l), op: ast::BinaryOp::Eq, right: Box::new(r) },
    #[precedence(level="4")] #[assoc(side="left")]
    <l: Expr> "!=" <r: Expr> => ast::Expr::Binary { left: Box::new(l), op: ast::BinaryOp::Neq, right: Box::new(r) },
    #[precedence(level="4")] #[assoc(side="left")]
    <l: Expr> "<" <r: Expr> => ast::Expr::Binary { left: Box::new(l), op: ast::BinaryOp::Less, right: Box::new(r) },
    #[precedence(level="4")] #[assoc(side="left")]
    <l: Expr> "<=" <r: Expr> => ast::Expr::Binary { left: Box::new(l), op: ast::BinaryOp::LessEq, right: Box::new(r) },
    #[precedence(level="4")] #[assoc(side="left")]
    <l: Expr> ">" <r: Expr> => ast::Expr::Binary { left: Box::new(l), op: ast::BinaryOp::Greater, right: Box::new(r) },
    #[precedence(level="4")] #[assoc(side="left")]
    <l: Expr> ">=" <r: Expr> => ast::Expr::Binary { left: Box::new(l), op: ast::BinaryOp::GreaterEq, right: Box::new(r) },
    #[precedence(level="4")]
    <l: Expr> "is" "null" => ast::Expr::Binary { left: Box::new(l), op: ast::BinaryOp::Eq, right: Box::new(ast::Expr::Literal{literal:ast::Literal::Null}) },
    #[precedence(level="4")]
    <l: Expr> "is" "not" "null" => ast::Expr::Binary { left: Box::new(l), op: ast::BinaryOp::Neq, right: Box::new(ast::Expr::Literal{literal:ast::Literal::Null}) },

    #[precedence(level="5")] #[assoc(side="left")]
    <l: Expr> "and" <r: Expr> => ast::Expr::Binary { left: Box::new(l), op: ast::BinaryOp::And, right: Box::new(r) },

    #[precedence(level="6")] #[assoc(side="left")]
    <l: Expr> "or" <r: Expr> => ast::Expr::Binary { left: Box::new(l), op: ast::BinaryOp::Or, right: Box::new(r) },
}

Literal: ast::Literal = {
    "int" => ast::Literal::Integer(<>),
    "float" => ast::Literal::Float(<>),
    "bool" => ast::Literal::Boolean(<>),
    "string" => ast::Literal::String(<>.to_string()),
    "null" => ast::Literal::Null,
}
#[inline]
Table: (Option<ast::Identifier>, ast::Identifier) = {
    <schema_name: (<Identifier> ".")?> <table_name: Identifier> => (schema_name, table_name)
}
Identifier: ast::Identifier = "id" => ast::Identifier(<>.to_string());
// MACROS
Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

Comma1<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T> => {
        v.push(e);
        v
    }
}


// TOKENS
extern {
    type Location = usize;
    type Error = TokenError;

    enum Token<'input> {
        "int" => Token::Int(<i64>),
        "float" => Token::Float(<f64>),
        "bool" => Token::Boolean(<bool>),
        "string" => Token::String(<Cow<'input, str>>),
        "binary" => Token::Binary(<Cow<'input, [u8]>>),
        "null" => Token::Null,

        "int_t" => Token::IntType,
        "varchar_t" => Token::VarCharType,
        "varbinary_t" => Token::VarBinaryType,
        "float_t" => Token::FloatType,
        "boolean_t" => Token::BooleanType,

        "id" => Token::Ident(<Cow<'input, str>>),

        "select" => Token::Select,
        "explain" => Token::Explain,
        "drop" => Token::Drop,
        "create" => Token::Create,
        "table" => Token::Table,
        "delete" => Token::Delete,
        "insert" => Token::Insert,

        "default" => Token::Default,
        "auto_increment" => Token::AutoIncrement,
        "key" => Token::Key,
        "primary" => Token::Primary,
        "unique" => Token::Unique,
        "foreign" => Token::Foreign,
        "constraint" => Token::Constraint,

        "from" => Token::From,
        "on" => Token::On,
        "where" => Token::Where,

        "join" => Token::Join,
        "inner" => Token::Inner,
        "outer" => Token::Outer,
        "left" => Token::Left,
        "right" => Token::Right,
        "full" => Token::Full,
        "cross" => Token::Cross,

        "as" => Token::As,
        "is" => Token::Is,

        "not" => Token::Not,
        "?" => Token::QMark,
        "*" => Token::Star,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "/" => Token::Divide,
        "=" => Token::Eq,
        "!=" => Token::Neq,
        ":" => Token::Colon,
        ";" => Token::SemiColon,
        "," => Token::Comma,
        "." => Token::Dot,
        "(" => Token::LParen,
        ")" => Token::RParen,
        ">" => Token::Greater,
        "<" => Token::Less,
        ">=" => Token::GreaterEq,
        "<=" => Token::LessEq,

        "and" => Token::And,
        "or" => Token::Or,
    }
}